/*
 * Style setup for redsift-ui based sifts.
 *
 * - Provides:
 *   . ready-to-use UI components
 *   . responsive type system
 *   . breakpoint setup (via 'rupture')
 *   . common functionality like reset, patterns and fonts
 *
 * - Used by:
 *   . redsift-light
 *   . redsift-dark
 *
 * - Folder structure:
 *
 *   ./lib        -> mixin and function library
 *   ./common     -> CSS setup and common classes
 *   ./components -> UI components
 */

/*
 * Mixin/functions library
 *
 * Common mixins and functions used by redsift-ui.
 */
@import './src/styles/lib/cards.import'
@import './src/styles/lib/gradients.import'

/*
 * Base configuration and common classes:
 *
 * CSS base setup and common CSS classes.
 */
@import './src/styles/common/reset.import'
@import './src/styles/common/fonts.import'
@import './src/styles/common/patterns.import'
@import './src/styles/common/breakpoints.import'
@import './src/styles/common/selection.import'
@import './src/styles/common/animation.import'
@import './src/styles/common/base.import'
@import './src/styles/common/types.import'

setup-types()
disable-selection() // FIXXME: only disable on mobile?
create-cards('cards', false)

/*
 * UI components:
 *
 * Each UI component is encapsulated within a setup function which takes an
 * opitional settings hash. If omitted the default settings available in the
 * respective component file are used. This allows a (theme) developer to
 * customize components for their own sifts and projects.
 */
@import './src/styles/components/inputs.import'
@import './src/styles/components/sliders.import'
@import './src/styles/components/widgets.import'
@import './src/styles/components/colour.import'
@import './src/styles/components/style-switcher.import'
/* FIXXME: refactor into components! */
@import './src/styles/components/d3.import'

setup-inputs()
setup-sliders()
setup-widget__down-arrow()
setup-style-switcher()
