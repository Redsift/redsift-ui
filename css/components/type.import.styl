/* Create a responsive type system */

responsive-type($fontNormal, $fontHighlight, $fontCode
				$widthBreakpoint = 990px, 
				$fontSizeSmall = 0.8125em, $fontSizeBase = 1em, $fontSizeMedium = 1.25em, $fontSizeLarge = 1.625em, 
				$fontSizeXLarge = 2.625em, $fontSizeXXLarge = 4.25em, $fontSizeHuge = 6.875em) {

	$spacingHighlight = 0.1em
	$lineSpacing = 1.5 * 16px
	
	large-screen(bp = $widthBreakpoint) {
		@media all and (min-width: bp) {
			{block}
		};
	}
	
	body {
		font-family: $fontNormal;
		font-weight: 300; 
	}

	rule--small(p) {
		font-size: $fontSizeSmall;
		font-weight: 300;
		line-height: $lineSpacing;
		if p {
			padding-top: @line-height;
			padding-bottom: 0;
		}
	}
	
	rule--base(p) {
		font-size: $fontSizeBase;
		font-weight: 300;
		line-height: $lineSpacing;
		if p {
			padding-top: @line-height;
			padding-bottom: 0;
		}
	}
	
	rule--medium(p) {
		font-size: $fontSizeMedium;
		font-weight: 300;
		line-height: $lineSpacing;
		if p {
			padding-top: @line-height;
			padding-bottom: 0;
		}
	}
	
	rule--large(p) {
		font-size: $fontSizeLarge;
		font-weight: 300;
		line-height: $lineSpacing;
		if p {
			padding-top: @line-height;
			padding-bottom: 0;
		}
	}
	
	rule--xlarge(p) {
		font-size: $fontSizeXLarge;
		font-weight: 300;
		line-height: $lineSpacing;
		if p {
			padding-top: @line-height;
			padding-bottom: 0;
		}
	}
	
	rule--xxlarge(p) { 
		font-size: $fontSizeXXLarge;
		font-weight: 300;
		line-height: $lineSpacing;
		if p {
			padding-top: @line-height;
			padding-bottom: 0;
		}
	}
	
	rule--huge(p) {
		font-size: $fontSizeHuge;
		font-weight: 300;
		line-height: $lineSpacing;
		if p {
			padding-top: @line-height;
			padding-bottom: 0;
		}
	}
	
	type--small(p = true) {
		rule--small(p)
	}
	
	type--base(p = true) {
		rule--base(p)
	}
	
	type--medium(p = true) {
		rule--base(p)
		+large-screen() {
			rule--medium(p)
		}
	}
	
	type--large(p = true) {
		rule--medium(p)
		+large-screen() {
			rule--large(p)
		}
	}
	
	type--xlarge(p = true) {
		rule--large(p)
		+large-screen() {
			rule--xlarge(p)
		}
	}
	
	type--xxlarge(p = true) {
		rule--xlarge(p)
		+large-screen() {
			rule--xxlarge(p)
		}
	}
	
	type--huge(p = true) {
		rule--xxlarge(p)
		+large-screen() {
			rule--huge(p)
		}
	}
	
	h1, h2, h3, h4, h5 {
		font-family: $fontHighlight;
		letter-spacing: $spacingHighlight;
		margin: 0;
	}
	
	p {
		margin: 0;
	}
	
	// Definitions
	.small,
	small {
		type--small()
	}
	
	.base,
	p,
	ul,
	ol {
		type--base()
	}
	
	.medium,
	h4 {
		type--medium()
	}
	
	.large,
	h3 {
		type--large()
	}
	
	.xlarge,
	h2 {
		type--xlarge()
	}
	
	.xxlarge,
	h1 {
		type--xxlarge()
	}
	
	.huge {
		type--huge()
	}
	
	.code {
		font-family: $fontCode;
		white-space: nowrap;
	}

}